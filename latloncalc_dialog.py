# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatLonCalcDialog
                                 A QGIS plugin
 Este olugin permite transformar coordenadas en GMS a GD
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-25
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Lesby Munguia
        email                : lesby.munguia@unah.hn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'latloncalc_dialog_base.ui'))


class LatLonCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatLonCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
          
        # Disparadores Latitud
        self.spbLatD.valueChanged.connect(self.latDMStoDD)
        self.spbLatM.valueChanged.connect(self.latDMStoDD)
        self.spbLatS.valueChanged.connect(self.latDMStoDD)
        self.cmbLat.currentTextChanged.connect(self.latDMStoDD)
        
        # Disparador DD Latitud
        self.spbLatDD.editingFinished.connect(self.latDDtoDMS)
        
        # Disparadores Longitud
        self.spbLonD.valueChanged.connect(self.lonDMStoDD)
        self.spbLonM.valueChanged.connect(self.lonDMStoDD)
        self.spbLonS.valueChanged.connect(self.lonDMStoDD)
        self.cmbLon.currentTextChanged.connect(self.lonDMStoDD)
        
        # Disparador DD Longitud
        self.spbLonDD.editingFinished.connect(self.lonDDtoDMS)
        
    def latDMStoDD(self):
        try:
            intDeg = self.spbLatD.value()
            intMin = self.spbLatM.value()
            decSeg = self.spbLatS.value()
            hem = self.cmbLat.currentText()

            # Validación de los valores de latitud
            if not (0 <= intDeg <= 90):
                raise ValueError("El valor de grados de latitud debe estar entre 0 y 90.")
            if not (0 <= intMin < 60):
                raise ValueError("El valor de minutos de latitud debe estar entre 0 y 59.")
            if not (0 <= decSeg < 60):
                raise ValueError("El valor de segundos de latitud debe estar entre 0 y 59.")
            
            dDD = float(intDeg) + intMin / 60 + decSeg / 3600
            
            if hem == "S":
                dDD = dDD * -1
             
            self.spbLatDD.setValue(dDD)
        
        except ValueError as e:
            print(f"Error: {e}")
    
    def latDDtoDMS(self):
        try:
            dDD = self.spbLatDD.value()
            intDeg = int(dDD)
            decMin = (dDD - intDeg) * 60
            intMin = int(decMin)
            decSeg = (decMin - intMin) * 60
            
            self.spbLatD.setValue(abs(intDeg))
            self.spbLatM.setValue(abs(intMin))
            self.spbLatS.setValue(abs(decSeg))
            
            if dDD < 0:
                self.cmbLat.setCurrentText("S")
            else:
                self.cmbLat.setCurrentText("N")
        
        except ValueError as e:
            print(f"Error: {e}")
    
    def lonDMStoDD(self):
        try:
            intDeg = self.spbLonD.value()
            intMin = self.spbLonM.value()
            decSeg = self.spbLonS.value()
            hem = self.cmbLon.currentText()
            
            # Validación de los valores de longitud
            if not (0 <= intDeg <= 180):
                raise ValueError("El valor de grados de longitud debe estar entre 0 y 180.")
            if not (0 <= intMin < 60):
                raise ValueError("El valor de minutos de longitud debe estar entre 0 y 59.")
            if not (0 <= decSeg < 60):
                raise ValueError("El valor de segundos de longitud debe estar entre 0 y 59.")
            
            dDD = float(intDeg) + intMin / 60 + decSeg / 3600
            
            if hem == "W":
                dDD = dDD * -1
            
            self.spbLonDD.setValue(dDD)
        
        except ValueError as e:
            print(f"Error: {e}")
    
    def lonDDtoDMS(self):
        try:
            dDD = self.spbLonDD.value()
            intDeg = int(dDD)
            decMin = (dDD - intDeg) * 60
            intMin = int(decMin)
            decSeg = (decMin - intMin) * 60
            
            self.spbLonD.setValue(abs(intDeg))
            self.spbLonM.setValue(abs(intMin))
            self.spbLonS.setValue(abs(decSeg))
            
            if dDD < 0:
                self.cmbLon.setCurrentText("W")
            else:
                self.cmbLon.setCurrentText("E")
        
        except ValueError as e:
            print(f"Error: {e}")
            
            
            
            
            